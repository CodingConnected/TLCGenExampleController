/* BEGIN GEGENEREERDE HEADER */
/* REGEL BESTAND, GEBRUIKERS TOEVOEGINGEN              */
/* --------------------------------------------------- */

/* KRUISPUNT: 123456
              123456
              123456
              123456

   BESTAND:   123456reg.add
      CCOL:   12.0
    TLCGEN:   12.4.0.0
   CCOLGEN:   12.4.0.0
*/

/****************************** Versie commentaar ***********************************
 *
 * Versie   Datum        Ontwerper   Commentaar
 * 12.2.1   14-03-2023   TLCGen      Ontwikkel versie TLCGen (portable)
 *
 ************************************************************************************/
/* EINDE GEGENEREERDE HEADER */

#ifdef CCOL_IS_SPECIAL
void SpecialSignals_Add(void)
{

}
#endif

void post_init_application()
{
}

void PreApplication_Add(void)
{
#ifndef AUTOMAAT
   #ifdef DUURTEST
      SCH[schcovuber] = 0;
   #endif
#endif
}

void KlokPerioden_Add(void)
{

}

void Aanvragen_Add(void)
{

}

boolv CorrectieRealisatieTijd_Add(void)
{
    /* let op! deze functie wordt in een loop aangeroepen (max. 100 iteraties). */
    boolv aanpassing = FALSE;
    
    /* Voeg hier zonodig eigen code toe, bijv:
     * aanpassing |= VTG2_Real_Los(fc32, fc31, T_max[tinl3231], T_max[tinl3132], hinl32, hinl31, hlos32, hlos31, (IH[hdrtk311] && IH[hdrtk321]));
     * aanpassing |= VTG2_Real_Los(fc31, fc32, T_max[tinl3132], T_max[tinl3231], hinl31, hinl32, hlos31, hlos32, (IH[hdrtk311] && IH[hdrtk321]));
     */
    
    return aanpassing;
}

void BepaalRealisatieTijden_Add(void)
{
}

void Maxgroen_Add(void)
{
}

void Wachtgroen_Add(void)
{
}

void Meetkriterium_Add(void)
{
}

void Meeverlengen_Add(void)
{
}

void Synchronisaties_Add(void)
{
}

void VersneldPrimair_Add(void)
{

}

void Alternatief_Add(void)
{
}

void Modules_Add(void)
{
}

void RealisatieAfhandeling_Add(void)
{
}

void FileVerwerking_Add(void)
{

}

void DetectieStoring_Add(void)
{

}

void PostApplication_Add(void)
{

#if (!defined AUTOMAAT && !defined AUTOMAAT_TEST && !defined VISSIM)

   /* TESTOMGEVING */
   /* ============ */

   if (TS &&
      (CIF_KLOK[CIF_JAAR] == 2099) && 
      (CIF_KLOK[CIF_MAAND] == 1) &&
      (CIF_KLOK[CIF_DAG] == 1) &&
      (CIF_KLOK[CIF_UUR] == 1) &&
      (CIF_KLOK[CIF_MINUUT] == 1) && 
      (CIF_KLOK[CIF_SECONDE] == 1))
   {
      stuffkey(F3KEY);
      stuffkey(F5KEY);
      stuffkey(F4KEY);
      stuffkey(F7KEY);
      //stuffkey(F10KEY); 
   }
#endif

#ifndef AUTOMAAT
    /* TESTOMGEVING */
    /* ============ */

//  if (!CIF_GUS[usstar01]) { 

//     if (ET[tlr2611] && G[fc11] && A[fc26] && R[fc26] && !C[cvchd11]) {
//      /* Schrijf naar de CCOL-terminal */
//      code helpstr[30];  /* help string */
//      uber_puts(PROMPT_code);
//      uber_puts("Ongewenste situatie: !VS fc");
//      uber_puts(FC_code[fc26]);
//      uber_puts(" en fc");
//      uber_puts(FC_code[fc11]);
//      uber_puts("");
//      uber_puts(" / ");
//      datetostr(helpstr);
//      uber_puts(helpstr);
//      uber_puts(" / ");
//      timetostr(helpstr);
//      uber_puts(helpstr);
//      uber_puts("\n");
//
//      /* Schrijf naar de debugwindow in de testomgeving */
//      xyprintf(0, 0, "Ongewenste situatie: LR niet gerespecteerd. Zie terminal.");
//
//      /* Halteer */
//      stuffkey(F5KEY);
//
//   }
//

  ControleerNaloopEG(fc22, fc21, tnlfg2221, tnleg2221, NG, TRUE);
  ControleerNaloopEG(fc82, fc81, tnlfg8281, tnleg8281, NG, TRUE);
  ControleerNaloopEG(fc02, fc62, tnlfg0262, tnleg0262, NG, TRUE);
  ControleerNaloopEG(fc11, fc68, tnlfg1168, tnleg1168, NG, TRUE);
  ControleerNaloopEG(fc08, fc68, tnlfg0868, tnleg0868, NG, TRUE);

  /* @#@ Fick, aantal machine slagen marge genomen */
  if (!ControleerInrijden(fc22, fc21, tlr2122, FALSE) && G[fc22] && R[fc21] && (TG_timer[fc22] > T_max[tlr2122] + 3)) stuffkey(F5KEY);
  if (!ControleerInrijden(fc82, fc81, tlr8182, FALSE) && G[fc82] && R[fc81] && (TG_timer[fc82] > T_max[tlr8182] + 3)) stuffkey(F5KEY);
  if (!ControleerInrijden(fc02, fc62, tlr6202, FALSE) && G[fc02] && R[fc62] && (TG_timer[fc02] > T_max[tlr6202] + 3)) stuffkey(F5KEY);
  if (!ControleerInrijden(fc08, fc68, tlr6808, FALSE) && G[fc08] && R[fc68] && (TG_timer[fc08] > T_max[tlr6808] + 3)) stuffkey(F5KEY);
  if (!ControleerInrijden(fc11, fc68, tlr6811, FALSE) && G[fc11] && R[fc68] && (TG_timer[fc11] > T_max[tlr6811] + 3)) stuffkey(F5KEY);

  ControleerVS(fc05, fc32, TRUE, TRUE);
// }
#endif


#ifndef AUTOMAAT
//    xyprintf(92, 0, "  d     Hm   Ht   Am   Dm");
//    xyprintf(92, 1, "%s:  %3d  %3d  %3d  %3d", D_code[d11_1], TDH_max[d11_1], TDH_timer[d11_1], TDHA_max[d11_1], TDHDYN_max[d11_1]);
//    xyprintf(92, 2, "%s:  %3d  %3d  %3d  %3d", D_code[d11_2], TDH_max[d11_2], TDH_timer[d11_2], TDHA_max[d11_2], TDHDYN_max[d11_2]);
//    xyprintf(92, 3, "%s:  %3d  %3d  %3d  %3d", D_code[d11_3], TDH_max[d11_3], TDH_timer[d11_3], TDHA_max[d11_3], TDHDYN_max[d11_3]);
//    xyprintf(92, 4, "%s:  %3d  %3d  %3d  %3d", D_code[d11_4], TDH_max[d11_4], TDH_timer[d11_4], TDHA_max[d11_4], TDHDYN_max[d11_4]);
#endif	

}

void pre_system_application(void)
{

}

void post_system_application(void)
{

}

void pre_msg_fctiming(void)
{

}

mulv MAXEND_set[FCMAX] = { 0 }; /* uitgestuurde MaxEnd tijd */
mulv ESTATE_cur[FCMAX] = { -1 }; /* huidige EventState       */
mulv MAXEND_tim[FCMAX] = { 0 }; /* lopende timer            */

void post_system_application2(void)
{

#if !defined AUTOMAAT && !defined AUTOMAAT_TEST
//   if (display) {
      int i;

      //xyprintf(115, 6, "MES   MET   ESH");

      for (i = 0; i < FC_MAX; ++i) {
         if (CIF_FC_TIMING[i][0][CIF_TIMING_MAXENDTIME] != -1) { // maxend tijdanders dan -1

            if (MAXEND_tim[i] == 0) {
               ESTATE_cur[i] = CIF_FC_TIMING[i][0][CIF_TIMING_EVENTSTATE]; /* status signaalgroep (bv rood / geel / groen) */
               MAXEND_set[i] = CIF_FC_TIMING[i][0][CIF_TIMING_MAXENDTIME]; /* hier wordt opgeslagen wat de uitgestuurde waarde is om later mee te vergelijken */
            }
            MAXEND_tim[i] += TE; // iedere machineslag ophogen tot de waarde maxend weer -1 is
         }

         if (CIF_FC_TIMING[i][0][CIF_TIMING_EVENTSTATE] != ESTATE_cur[i]) {

            if (MAXEND_tim[i] > MAXEND_set[i]) { // check of gemeten maxend tijd hoger is dan de gemeten tijd, als waar dan stuffkey
               /* Schrijf naar de CCOL-terminal */
               code helpstr[30]; /* help string */
               uber_puts(PROMPT_code);
               uber_puts("Ongewenste situatie: TIMINGS fc");
               uber_puts(FC_code[i]);
               uber_puts(" / ");
               datetostr(helpstr);
               uber_puts(helpstr);
               uber_puts(" / ");
               timetostr(helpstr);
               uber_puts(helpstr);
               uber_puts("\n");
               //stuffkey(F5KEY);
            }
            MAXEND_tim[i] = 0;
            MAXEND_set[i] = 0;
            ESTATE_cur[i] = -1;

         }
         //xyprintf(115, 7 + i, "%3d   %3d   %3d", MAXEND_set[i], MAXEND_tim[i], ESTATE_cur[i]);
      //}
   }
#endif   

}

void post_dump_application(void)
{
}

