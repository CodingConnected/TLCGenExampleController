/* BEGIN GEGENEREERDE HEADER */
/* REGEL BESTAND, GEBRUIKERS TOEVOEGINGEN              */
/* --------------------------------------------------- */

/* KRUISPUNT: 123456
              123456
              123456
              123456

   BESTAND:   123456reg.add
      CCOL:   12.0
    TLCGEN:   12.4.1.0
   CCOLGEN:   12.4.1.0
*/

/****************************** Versie commentaar ***********************************
 *
 * Versie   Datum   Ontwerper   Commentaar
 *
 ************************************************************************************/
/* EINDE GEGENEREERDE HEADER */



#ifdef CCOL_IS_SPECIAL
void SpecialSignals_Add(void)
{
   
}
#endif

void post_init_application()
{
#ifndef AUTOMAAT
   //stuffkey(F5KEY);
   //stuffkey(ALTF9KEY);
   //stuffkey(F2KEY);
   //stuffkey(CTRLALTF3KEY);
   //stuffkey(F4KEY);
   //stuffkey(F10KEY);
   //stuffkey(F11KEY);
   CFB_max = 0; /* maximum aantal herstarts na fasebewaking */
#endif

}

void PreApplication_Add(void)
{

}

void KlokPerioden_Add(void)
{

}

void Aanvragen_Add(void)
{

}

void Maxgroen_Add(void)
{

}

boolv CorrectieRealisatieTijd_Add(void)
{
    /* let op! deze functie wordt in een loop aangeroepen (max. 100 iteraties). */
    boolv aanpassing = FALSE;
    
    /* Voeg hier zonodig eigen code toe, bijv:
     * aanpassing |= VTG2_Real_Los(fc32, fc31, T_max[tinl3231], T_max[tinl3132], hinl32, hinl31, hlos32, hlos31, (IH[hdrtk311] && IH[hdrtk321]));
     * aanpassing |= VTG2_Real_Los(fc31, fc32, T_max[tinl3132], T_max[tinl3231], hinl31, hinl32, hlos31, hlos32, (IH[hdrtk311] && IH[hdrtk321]));
     */
    
    return aanpassing;
}

void BepaalRealisatieTijden_Add(void)
{

}

void Wachtgroen_Add(void)
{

}

void Meetkriterium_Add(void)
{

}

void Meeverlengen_Add(void)
{

}

void Synchronisaties_Add(void)
{
}

void VersneldPrimair_Add(void)
{

}

void Alternatief_Add(void)
{
}

void Modules_Add(void)
{
}

void RealisatieAfhandeling_Add(void)
{
}

void FileVerwerking_Add(void)
{

}

void DetectieStoring_Add(void)
{

}

void PostApplication_Add(void)
{
//   int fc; 

   /* TESTOMGEVING */
   /* ============ */
#if (!defined AUTOMAAT && !defined AUTOMAAT_TEST && !defined VISSIM)

//  xyprintf(115, 1, "MAGAFTELLEN fc02: %4d", MAGAFTELLEN[fc02]);
//  xyprintf(115, 2, "MAGAFTELLEN fc03: %4d", MAGAFTELLEN[fc03]);
//  xyprintf(115, 3, "MAGAFTELLEN fc05: %4d", MAGAFTELLEN[fc05]);
//  xyprintf(115, 4, "MAGAFTELLEN fc08: %4d", MAGAFTELLEN[fc08]);
//  xyprintf(115, 5, "MAGAFTELLEN fc09: %4d", MAGAFTELLEN[fc09]);
//  xyprintf(115, 6, "MAGAFTELLEN fc11: %4d", MAGAFTELLEN[fc11]);
//  xyprintf(115, 7, "MAGAFTELLEN fc61: %4d", MAGAFTELLEN[fc61]);
//  xyprintf(115, 8, "MAGAFTELLEN fc62: %4d", MAGAFTELLEN[fc62]);
//  xyprintf(115, 9, "MAGAFTELLEN fc67: %4d", MAGAFTELLEN[fc67]);
//  xyprintf(115,10, "MAGAFTELLEN fc68: %4d", MAGAFTELLEN[fc68]);

   //MAGAFTELLEN[fc02]
//   for (fc = 0; fc < FC_MAX; ++fc) {
//      X[fc] &= ~BIT14;
//      if (AFTELLER_TE[fc] > 0) {
//         //X[fc] |= BIT14;
//      }
//   }


   if (TS &&
      (CIF_KLOK[CIF_JAAR] == 2099) &&
      (CIF_KLOK[CIF_MAAND] == 1) &&
      (CIF_KLOK[CIF_DAG] == 1) &&
      (CIF_KLOK[CIF_UUR] == 12) &&
      (CIF_KLOK[CIF_MINUUT] == 5) &&
      (CIF_KLOK[CIF_SECONDE] == 25))
   {
      stuffkey(F3KEY);
      stuffkey(F5KEY);
      stuffkey(F4KEY);
      //stuffkey(F10KEY); 
   }
#endif

}

void WachttijdvoorspellersWachttijd_Add(void)
{

}

void pre_system_application(void)
{

}

void post_system_application(void)
{

}

void pre_msg_fctiming(void)
{
}

void post_system_application2(void)
{
}

void post_dump_application(void)
{
}

