/* BEGIN GEGENEREERDE HEADER */
/* REGEL BESTAND, GEBRUIKERS TOEVOEGINGEN              */
/* --------------------------------------------------- */

/* KRUISPUNT: 123456
              123456
              123456
              123456

   BESTAND:   123456reg.add
      CCOL:   12.0
    TLCGEN:   0.12.1.0
   CCOLGEN:   0.12.1.0
*/

/****************************** Versie commentaar ***********************************
 *
 * Versie   Datum        Ontwerper   Commentaar
 * 12.1.0   07-10-2022   TLCGen      Nieuwe versie TLCGen (release)
 *
 ************************************************************************************/
/* EINDE GEGENEREERDE HEADER */

//@@
#include "traffick2tlcgen.c"

#ifdef CCOL_IS_SPECIAL
void SpecialSignals_Add(void)
{

}
#endif

void post_init_application()
{
   //@@
   //TODO: late release
   //TODO: late release
   //TODO: schakelbare gelijkstarten 
   init_traffick2tlcgen();

   definitie_harde_koppeling(fc02, fc62, tlr6202, tnlfg0262, tnlfgd0262, tnleg0262, tnlegd0262, TRUE, TRUE, TVG_max[fc62]);
   definitie_harde_koppeling(fc08, fc68, tlr6808, tnlfg0868, tnlfgd0868, tnleg0868, tnlegd0868, TRUE, TRUE, TVG_max[fc68]);
   definitie_harde_koppeling(fc11, fc68, tlr6811, tnlfg1168, tnlfgd1168, tnleg1168, tnlegd1168, TRUE, TRUE, TVG_max[fc68]);
   definitie_harde_koppeling(fc22, fc21, tlr2122, tnlfg2221, tnlfgd2221, tnleg2221, tnlegd2221, TRUE, TRUE, TVG_max[fc21]);
   definitie_harde_koppeling(fc82, fc81, tlr8182, tnlfg8281, tnlfgd8281, tnleg8281, tnlegd8281, TRUE, TRUE, TVG_max[fc81]);

   definitie_vtg_gescheiden(fc31, fc32, tinl3132, tinl3231, tnlsgd3132, tnlsgd3231, hnlak31a, hnlak32a, hlos31, hlos32);
   definitie_vtg_gescheiden(fc33, fc34, tinl3334, tinl3433, tnlsgd3334, tnlsgd3433, hnlak33a, hnlak34a, hlos33, hlos34);

   definitie_gelijkstart_lvk(fc22, fc32, NG, NG);
   definitie_gelijkstart_lvk(fc24, fc34, NG, NG);
   definitie_gelijkstart_lvk(fc33, fc84, NG, NG);

   definitie_voorstart_dcf(fc05, fc22, tvs2205, tfo0522, schma0522, schhardmv2205);
   definitie_voorstart_dcf(fc05, fc32, tvs3205, tfo0532, schma0532, schhardmv3205);
   definitie_voorstart_dcf(fc11, fc26, tvs2611, tfo1126, schma2611, schhardmv2611);

   /* definitie kruispunt armen */
    /* ------------------------- */
   ARM[fc02] = 1;
   ARM[fc03] = 1;
   ARM[fc05] = 2;
   ARM[fc08] = 3;
   ARM[fc09] = 3;
   ARM[fc11] = 4;

   ARM[fc61] = 11;
   ARM[fc62] = 11;
   ARM[fc67] = 13;
   ARM[fc68] = 13;

   volg_ARM[fc02] = 11;
   volg_ARM[fc03] = 11;
   volg_ARM[fc05] = 11;

   volg_ARM[fc08] = 13;
   volg_ARM[fc09] = 13;
   volg_ARM[fc11] = 13;
}

void PreApplication_Add(void)
{
#ifndef AUTOMAAT
   #ifdef DUURTEST
      SCH[schcovuber] = 0;
   #endif
#endif
      /* bijwerken detectie variabelen */
      /* ----------------------------- */
      traffick2tlcgen_detectie();

      /* faseyclus instellingen */
      /* ---------------------- */
      traffick2tlcgen_instel(fc02, SCH[schwg02], TRUE, SCH[schmv02], FALSE, SCH[schaltg02]  , PRM[prmaltb02], PRM[prmaltg02], prioFC02bus  , prioFC02risov, NG, hdFC02, C[cvchd02], NG);
      traffick2tlcgen_instel(fc03, SCH[schwg03], TRUE, SCH[schmv03], FALSE, SCH[schaltg03]  , PRM[prmaltb03], PRM[prmaltg03], prioFC03bus  , prioFC03risov, NG, hdFC03, C[cvchd03], NG);
      traffick2tlcgen_instel(fc05, SCH[schwg05], TRUE, SCH[schmv05], FALSE, SCH[schaltg05]  , PRM[prmaltb05], PRM[prmaltg05], prioFC05bus  , prioFC05risov, NG, hdFC05, C[cvchd05], NG);
      traffick2tlcgen_instel(fc08, SCH[schwg08], TRUE, SCH[schmv08], FALSE, SCH[schaltg08]  , PRM[prmaltb08], PRM[prmaltg08], prioFC08bus  , prioFC08risov, NG, hdFC08, C[cvchd08], NG);
      traffick2tlcgen_instel(fc09, SCH[schwg09], TRUE, SCH[schmv09], FALSE, SCH[schaltg09]  , PRM[prmaltb09], PRM[prmaltg09], prioFC09bus  , prioFC09risov, NG, hdFC09, C[cvchd09], NG);
      traffick2tlcgen_instel(fc11, SCH[schwg11], TRUE, SCH[schmv11], FALSE, SCH[schaltg11]  , PRM[prmaltb11], PRM[prmaltg11], prioFC11bus  , prioFC11risov, NG, hdFC11, C[cvchd11], NG);
      traffick2tlcgen_instel(fc21, SCH[schwg21], TRUE, SCH[schmv21], FALSE, SCH[schaltg21]  , PRM[prmaltb21], PRM[prmaltg21], NG           , NG           , NG, NG    , NG        , NG);
      traffick2tlcgen_instel(fc22, SCH[schwg22], TRUE, SCH[schmv22], FALSE, SCH[schaltg2232], PRM[prmaltb22], PRM[prmaltg22], NG           , NG           , NG, NG    , NG        , prioFC22fiets);
      traffick2tlcgen_instel(fc24, SCH[schwg24], TRUE, SCH[schmv24], FALSE, SCH[schaltg2434], PRM[prmaltb24], PRM[prmaltg24], NG           , NG           , NG, NG    , NG        , NG);
      traffick2tlcgen_instel(fc26, SCH[schwg26], TRUE, SCH[schmv26], FALSE, SCH[schaltg26]  , PRM[prmaltb26], PRM[prmaltg26], NG           , NG           , NG, NG    , NG        , NG);
      traffick2tlcgen_instel(fc28, SCH[schwg28], TRUE, SCH[schmv28], FALSE, SCH[schaltg28]  , PRM[prmaltb28], PRM[prmaltg28], NG           , NG           , NG, NG    , NG        , prioFC28fiets);
      traffick2tlcgen_instel(fc31, SCH[schwg31], TRUE, SCH[schmv31], FALSE, SCH[schaltg31]  , PRM[prmaltb31], PRM[prmaltg31], NG           , NG           , NG, NG    , NG        , NG);
      traffick2tlcgen_instel(fc32, SCH[schwg32], TRUE, SCH[schmv32], FALSE, SCH[schaltg2232], PRM[prmaltb32], PRM[prmaltg32], NG           , NG           , NG, NG    , NG        , NG);
      traffick2tlcgen_instel(fc33, SCH[schwg33], TRUE, SCH[schmv33], FALSE, SCH[schaltg3384], PRM[prmaltb33], PRM[prmaltg33], NG           , NG           , NG, NG    , NG        , NG);
      traffick2tlcgen_instel(fc34, SCH[schwg34], TRUE, SCH[schmv34], FALSE, SCH[schaltg2434], PRM[prmaltb34], PRM[prmaltg34], NG           , NG           , NG, NG    , NG        , NG);
      traffick2tlcgen_instel(fc38, SCH[schwg38], TRUE, SCH[schmv38], FALSE, SCH[schaltg38]  , PRM[prmaltb38], PRM[prmaltg38], NG           , NG           , NG, NG    , NG        , NG);
      traffick2tlcgen_instel(fc61, SCH[schwg61], TRUE, SCH[schmv61], FALSE, SCH[schaltg61]  , PRM[prmaltb61], PRM[prmaltg61], prioFC61bus  , prioFC61risov, NG, hdFC61, C[cvchd61], NG);
      traffick2tlcgen_instel(fc62, SCH[schwg62], TRUE, SCH[schmv62], FALSE, SCH[schaltg62]  , PRM[prmaltb62], PRM[prmaltg62], prioFC62bus  , prioFC62risov, NG, hdFC62, C[cvchd62], NG);
      traffick2tlcgen_instel(fc67, SCH[schwg67], TRUE, SCH[schmv67], FALSE, SCH[schaltg67]  , PRM[prmaltb67], PRM[prmaltg67], prioFC67bus  , prioFC67risov, NG, hdFC67, C[cvchd67], NG);
      traffick2tlcgen_instel(fc68, SCH[schwg68], TRUE, SCH[schmv68], FALSE, SCH[schaltg68]  , PRM[prmaltb68], PRM[prmaltg68], prioFC68bus  , prioFC68risov, NG, hdFC68, C[cvchd68], NG);
      traffick2tlcgen_instel(fc81, SCH[schwg81], TRUE, SCH[schmv81], FALSE, SCH[schaltg81]  , PRM[prmaltb81], PRM[prmaltg81], NG           , NG           , NG, NG     , NG        , NG);
      traffick2tlcgen_instel(fc82, SCH[schwg82], TRUE, SCH[schmv82], FALSE, SCH[schaltg82]  , PRM[prmaltb82], PRM[prmaltg82], NG           , NG           , NG, NG     , NG        , NG);
      traffick2tlcgen_instel(fc84, SCH[schwg84], TRUE, SCH[schmv84], FALSE, SCH[schaltg3384], PRM[prmaltb84], PRM[prmaltg84], NG           , NG           , NG, NG     , NG        , NG);

}

void KlokPerioden_Add(void)
{

}

void Aanvragen_Add(void)
{

}

boolv CorrectieRealisatieTijd_Add(void)
{
    /* let op! deze functie wordt in een loop aangeroepen (max. 100 iteraties). */
    boolv aanpassing = FALSE;
    
    /* Voeg hier zonodig eigen code toe, bijv:
     * aanpassing |= VTG2_Real_Los(fc32, fc31, T_max[tinl3231], T_max[tinl3132], hinl32, hinl31, hlos32, hlos31, (IH[hdrtk311] && IH[hdrtk321]));
     * aanpassing |= VTG2_Real_Los(fc31, fc32, T_max[tinl3132], T_max[tinl3231], hinl31, hinl32, hlos31, hlos32, (IH[hdrtk311] && IH[hdrtk321]));
     */
    
    return aanpassing;
}

void BepaalRealisatieTijden_Add(void)
{
   RealTraffick();

}

void Maxgroen_Add(void)
{
   BepaalAltRuimte();

#if (!defined (AUTOMAAT) && !defined AUTOMAAT_TEST || defined (VISSIM)) && !defined NO_PRINT_REALTIJD
    if (display)
    {
      count fc;

      xyprintf(92, 6, "      T2SG T2EG AltR  TFB");
      for (fc = 0; fc < FCMAX; ++fc)
      {
        xyprintf( 97, 7 + fc, "%5d", REALtraffick[fc]);
        xyprintf(102, 7 + fc, "%5d", TEG[fc]);
        xyprintf(107, 7 + fc, "%5d", AltRuimte[fc]);
        xyprintf(112, 7 + fc, "%5d", TFB_timer[fc]);
        xyprintf(117, 7 + fc, "%5d", MTG[fc]);
      }
    } 
#endif
}

void Wachtgroen_Add(void)
{
   Traffick2TLCgen_WGR();

}

void Meetkriterium_Add(void)
{

}

void Meeverlengen_Add(void)
{
   Traffick2TLCgen_MVG();

}

void Synchronisaties_Add(void)
{
   Traffick2TLCgen_uitstel();

}

void VersneldPrimair_Add(void)
{

}

void Alternatief_Add(void)
{
   Traffick2TLCgen_PAR();

}

void Modules_Add(void)
{
   BugFix_RR_bij_HKI();

}

void RealisatieAfhandeling_Add(void)
{
   Traffick2TLCgen_REA();

}

void FileVerwerking_Add(void)
{

}

void DetectieStoring_Add(void)
{

}

void PostApplication_Add(void)
{

#if (!defined AUTOMAAT && !defined AUTOMAAT_TEST && !defined VISSIM)

   /* TESTOMGEVING */
   /* ============ */

   if (TS &&
      (CIF_KLOK[CIF_JAAR] == 2001) && 
      (CIF_KLOK[CIF_MAAND] == 1) &&
      (CIF_KLOK[CIF_DAG] == 1) &&
      (CIF_KLOK[CIF_UUR] == 15) &&
      (CIF_KLOK[CIF_MINUUT] == 22) && 
      (CIF_KLOK[CIF_SECONDE] == 50)) //00
   {
      stuffkey(F3KEY);
      stuffkey(F5KEY);
      stuffkey(F4KEY);
      stuffkey(F7KEY);
      //stuffkey(F10KEY); 
   }
#endif

#ifndef AUTOMAAT
    /* TESTOMGEVING */
    /* ============ */

  if (!CIF_GUS[usstar01]) { 

//     if (ET[tlr2611] && G[fc11] && A[fc26] && R[fc26] && !C[cvchd11]) {
//      /* Schrijf naar de CCOL-terminal */
//      code helpstr[30];  /* help string */
//      uber_puts(PROMPT_code);
//      uber_puts("Ongewenste situatie: !VS fc");
//      uber_puts(FC_code[fc26]);
//      uber_puts(" en fc");
//      uber_puts(FC_code[fc11]);
//      uber_puts("");
//      uber_puts(" / ");
//      datetostr(helpstr);
//      uber_puts(helpstr);
//      uber_puts(" / ");
//      timetostr(helpstr);
//      uber_puts(helpstr);
//      uber_puts("\n");
//
//      /* Schrijf naar de debugwindow in de testomgeving */
//      xyprintf(0, 0, "Ongewenste situatie: LR niet gerespecteerd. Zie terminal.");
//
//      /* Halteer */
//      stuffkey(F5KEY);
//
//   }
//

  ControleerNaloopEG(fc22, fc21, tnlfg2221, tnleg2221, NG, TRUE);
  ControleerNaloopEG(fc82, fc81, tnlfg8281, tnleg8281, NG, TRUE);
  ControleerNaloopEG(fc02, fc62, tnlfg0262, tnleg0262, NG, TRUE);
  ControleerNaloopEG(fc11, fc68, tnlfg1168, tnleg1168, NG, TRUE);
  ControleerNaloopEG(fc08, fc68, tnlfg0868, tnleg0868, NG, TRUE);

  ControleerInrijden(fc22, fc21, tlr2122, TRUE);
  ControleerInrijden(fc82, fc81, tlr8182, TRUE);
  ControleerInrijden(fc02, fc62, tlr6202, TRUE);
  ControleerInrijden(fc08, fc68, tlr6808, TRUE);
  ControleerInrijden(fc11, fc68, tlr6811, TRUE);

  ControleerVS(fc05, fc32, TRUE, TRUE);
 }
#endif


#ifndef AUTOMAAT
//    xyprintf(92, 0, "  d     Hm   Ht   Am   Dm");
//    xyprintf(92, 1, "%s:  %3d  %3d  %3d  %3d", D_code[d11_1], TDH_max[d11_1], TDH_timer[d11_1], TDHA_max[d11_1], TDHDYN_max[d11_1]);
//    xyprintf(92, 2, "%s:  %3d  %3d  %3d  %3d", D_code[d11_2], TDH_max[d11_2], TDH_timer[d11_2], TDHA_max[d11_2], TDHDYN_max[d11_2]);
//    xyprintf(92, 3, "%s:  %3d  %3d  %3d  %3d", D_code[d11_3], TDH_max[d11_3], TDH_timer[d11_3], TDHA_max[d11_3], TDHDYN_max[d11_3]);
//    xyprintf(92, 4, "%s:  %3d  %3d  %3d  %3d", D_code[d11_4], TDH_max[d11_4], TDH_timer[d11_4], TDHA_max[d11_4], TDHDYN_max[d11_4]);
#endif	

#if (!defined (AUTOMAAT) && !defined AUTOMAAT_TEST || defined (VISSIM)) && defined NO_PRINT_REALTIJD
  if (display)
  {
     count fc;

     xyprintf(0, 0, "FC   T2SG T2EG AltR  TFB   AR   PG  PAR   HLPD");
     for (fc = 0; fc < FCMAX; ++fc)
     {
        xyprintf(0, 1 + fc, "%s%s%5d%5d%5d%5d%5d%5d%5d%5d", "FC", FC_code[fc], REALtraffick[fc], TEG[fc], AltRuimte[fc], TFB_timer[fc], AR[fc], PG[fc], PAR[fc], HLPD[fc]);
     }
  }
#endif

#if (!defined AUTOMAAT && !defined AUTOMAAT_TEST) || defined VISSIM || defined PRACTICE_TEST
  FlightTraffick();
#endif

}

void pre_system_application(void)
{

}

void post_system_application(void)
{

}

void pre_msg_fctiming(void)
{

}

mulv MAXEND_set[FCMAX] = { 0 }; /* uitgestuurde MaxEnd tijd */
mulv ESTATE_cur[FCMAX] = { -1 }; /* huidige EventState       */
mulv MAXEND_tim[FCMAX] = { 0 }; /* lopende timer            */

void post_system_application2(void)
{

#if !defined AUTOMAAT && !defined AUTOMAAT_TEST
//   if (display) {
      int i;

      //xyprintf(115, 6, "MES   MET   ESH");

      for (i = 0; i < FC_MAX; ++i) {
         if (CIF_FC_TIMING[i][0][CIF_TIMING_MAXENDTIME] != -1) { // maxend tijdanders dan -1

            if (MAXEND_tim[i] == 0) {
               ESTATE_cur[i] = CIF_FC_TIMING[i][0][CIF_TIMING_EVENTSTATE]; /* status signaalgroep (bv rood / geel / groen) */
               MAXEND_set[i] = CIF_FC_TIMING[i][0][CIF_TIMING_MAXENDTIME]; /* hier wordt opgeslagen wat de uitgestuurde waarde is om later mee te vergelijken */
            }
            MAXEND_tim[i] += TE; // iedere machineslag ophogen tot de waarde maxend weer -1 is
         }

         if (CIF_FC_TIMING[i][0][CIF_TIMING_EVENTSTATE] != ESTATE_cur[i]) {

            if (MAXEND_tim[i] > MAXEND_set[i]) { // check of gemeten maxend tijd hoger is dan de gemeten tijd, als waar dan stuffkey
               /* Schrijf naar de CCOL-terminal */
               code helpstr[30]; /* help string */
               uber_puts(PROMPT_code);
               uber_puts("Ongewenste situatie: TIMINGS fc");
               uber_puts(FC_code[i]);
               uber_puts(" / ");
               datetostr(helpstr);
               uber_puts(helpstr);
               uber_puts(" / ");
               timetostr(helpstr);
               uber_puts(helpstr);
               uber_puts("\n");
               //stuffkey(F5KEY);
            }
            MAXEND_tim[i] = 0;
            MAXEND_set[i] = 0;
            ESTATE_cur[i] = -1;

         }
         //xyprintf(115, 7 + i, "%3d   %3d   %3d", MAXEND_set[i], MAXEND_tim[i], ESTATE_cur[i]);
      //}
   }
#endif   

}

void post_dump_application(void)
{
   DumpTraffick();

}

