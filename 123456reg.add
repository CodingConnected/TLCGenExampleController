/* BEGIN GEGENEREERDE HEADER */
/* REGEL BESTAND, GEBRUIKERS TOEVOEGINGEN              */
/* --------------------------------------------------- */

/* KRUISPUNT: 123456
              123456
              123456
              123456

   BESTAND:   123456reg.add
      CCOL:   12.0
    TLCGEN:   12.4.0.0
   CCOLGEN:   12.4.0.0
*/

/****************************** Versie commentaar ***********************************
 *
 * Versie   Datum        Ontwerper   Commentaar
 * 12.4.0   17-10-2023   TLCGen      Ontwikkel versie TLCGen (laastste portable) voor Interfunc - aanpassing PRIO
 *
 ************************************************************************************/
/* EINDE GEGENEREERDE HEADER */
FILE* fpt;

#if defined CCOL_IS_SPECIAL && !defined NO_PRIO
void SpecialSignals_Add(void)
{

}
#endif

void post_init_application()
{
    int i;
    fpt = fopen("MyFile.csv", "w");
    for (i = 0; i < FCMAX; ++i)
    {
        fprintf(fpt, "%4s,", FC_code[i]);
    }
    fprintf(fpt, " prio02,");
    fprintf(fpt, " prio03,");
    fprintf(fpt, " prio05,");
    fprintf(fpt, " prio08,");
    fprintf(fpt, " prio09,");
    fprintf(fpt, " prio11,");
    fprintf(fpt, "\n");
    fclose(fpt);


    stuffkey(F2KEY);
    stuffkey(CTRLALTF3KEY);
    stuffkey(F4KEY);

}

void PreApplication_Add(void)
{

}

void DetectieStoring_Aanvraag_Add(void)
{

}

void DetectieStoring_Meetkriterium_Add(void)
{

}

void DetectieStoring_VerlengGroen_Add(void)
{

}

void KlokPerioden_Add(void)
{

}

void Aanvragen_Add(void)
{

}

void Maxgroen_Add(void)
{

}

void Wachtgroen_Add(void)
{

}

void Meetkriterium_Add(void)
{

}

void Meeverlengen_Add(void)
{

}

void Synchronisaties_Add(void)
{

}

void VersneldPrimair_Add(void)
{

}

void Alternatief_Add(void)
{

}

void Modules_Add(void)
{

}

void RealisatieAfhandeling_Add(void)
{

}

void FileVerwerking_Add(void)
{

}

void PostApplication_Add(void)
{
count prio;
#if (!defined AUTOMAAT && !defined AUTOMAAT_TEST && !defined VISSIM)

   /* TESTOMGEVING */
   /* ============ */

   if (TS &&
      (CIF_KLOK[CIF_JAAR] == 2001) && 
      (CIF_KLOK[CIF_MAAND] == 1) &&
      (CIF_KLOK[CIF_DAG] == 1) &&
      (CIF_KLOK[CIF_UUR] == 12) &&
      (CIF_KLOK[CIF_MINUUT] == 4) && 
      (CIF_KLOK[CIF_SECONDE] == 0))
   {
      stuffkey(F5KEY);
      //stuffkey(F5KEY);
      //stuffkey(F4KEY);
      //stuffkey(F7KEY);
      //stuffkey(F10KEY); 
   }
#endif

#ifndef AUTOMAAT
    /* TESTOMGEVING */
    /* ============ */

//  if (!CIF_GUS[usstar01]) { 

//     if (ET[tlr2611] && G[fc11] && A[fc26] && R[fc26] && !C[cvchd11]) {
//      /* Schrijf naar de CCOL-terminal */
//      code helpstr[30];  /* help string */
//      uber_puts(PROMPT_code);
//      uber_puts("Ongewenste situatie: !VS fc");
//      uber_puts(FC_code[fc26]);
//      uber_puts(" en fc");
//      uber_puts(FC_code[fc11]);
//      uber_puts("");
//      uber_puts(" / ");
//      datetostr(helpstr);
//      uber_puts(helpstr);
//      uber_puts(" / ");
//      timetostr(helpstr);
//      uber_puts(helpstr);
//      uber_puts("\n");
//
//      /* Schrijf naar de debugwindow in de testomgeving */
//      xyprintf(0, 0, "Ongewenste situatie: LR niet gerespecteerd. Zie terminal.");
//
//      /* Halteer */
//      stuffkey(F5KEY);
//
//   }
//

  ControleerNaloopEG(fc22, fc21, tnlfg2221, tnleg2221, NG, TRUE);
  ControleerNaloopEG(fc82, fc81, tnlfg8281, tnleg8281, NG, TRUE);
  ControleerNaloopEG(fc02, fc62, tnlfg0262, tnleg0262, NG, TRUE);
  ControleerNaloopEG(fc11, fc68, tnlfg1168, tnleg1168, NG, TRUE);
  ControleerNaloopEG(fc08, fc68, tnlfg0868, tnleg0868, NG, TRUE);

  /* @#@ Fick, aantal machine slagen marge genomen */
 if (!ControleerInrijden(fc22, fc21, txnl2221, FALSE) && G[fc22] && R[fc21] && (TG_timer[fc22] > PRM[txnl2221] + 3)) stuffkey(F5KEY);
 if (!ControleerInrijden(fc82, fc81, txnl8281, FALSE) && G[fc82] && R[fc81] && (TG_timer[fc82] > PRM[txnl8281] + 3)) stuffkey(F5KEY);
 if (!ControleerInrijden(fc02, fc62, txnl0262, FALSE) && G[fc02] && R[fc62] && (TG_timer[fc02] > PRM[txnl0262] + 3)) stuffkey(F5KEY);
 if (!ControleerInrijden(fc08, fc68, txnl0868, FALSE) && G[fc08] && R[fc68] && (TG_timer[fc08] > PRM[txnl0868] + 3)) stuffkey(F5KEY);
 if (!ControleerInrijden(fc11, fc68, txnl1168, FALSE) && G[fc11] && R[fc68] && (TG_timer[fc11] > PRM[txnl1168] + 3)) stuffkey(F5KEY);

  ControleerVS(fc05, fc32, TRUE, TRUE);
// }
#endif
  count x, y;
  /* TESTOMGEVING */
  /* ============ */
#if (!defined AUTOMAAT && !defined AUTOMAAT_TEST && !defined VISSIM)
  if (TS &&
      (CIF_KLOK[CIF_JAAR] == 2099) &&
      (CIF_KLOK[CIF_MAAND] == 1) &&
      (CIF_KLOK[CIF_DAG] == 1) &&
      (CIF_KLOK[CIF_UUR] == 1) &&
      (CIF_KLOK[CIF_MINUUT] == 1) &&
      (CIF_KLOK[CIF_SECONDE] == 1))
  {
      //stuffkey(F2KEY);
      //stuffkey(F5KEY);
      //stuffkey(F4KEY);
      //stuffkey(F10KEY); 
  }
#endif
  //    xyprintf(30, 0, "REALTIJD");
  xyprintf(38 + 4 * FCMAX, 0, "InterStartGroentijd");
  xyprintf(46 + 8 * FCMAX, 0, "PAR");
  for (y = 0; y < FCMAX; ++y)
  {
      xyprintf(30, y + 4, "%2s", FC_code[y]);
      for (x = 0; x < FCMAX; ++x)
      {
          xyprintf(34 + 4 * x, y + 4, "%4d", REALISATIETIJD[y][x]);
      }
  }
  for (x = 0; x < FCMAX; ++x)
  {
      xyprintf(34 + 4 * x, 3, "%4s", FC_code[x]);
  }
  for (x = 0; x < FCMAX; ++x)
  {
      xyprintf(34 + 4 * x, 4 + FCMAX, "%4d", REALISATIETIJD_max[x]);
  }
  for (x = 0; x < FCMAX; ++x)
  {
      xyprintf(42 + 4 * (x + FCMAX), 3, "%4s", FC_code[x]);
  }
  for (y = 0; y < FCMAX; ++y)
  {
      xyprintf(38 + 4 * FCMAX, y + 4, "%2s", FC_code[y]);
      for (x = 0; x < FCMAX; ++x)
      {
          xyprintf(42 + 4 * (x + FCMAX), y + 4, "%4d", TISG_PR[y][x]);
      }
  }
  for (x = 0; x < FCMAX; ++x)
  {
      xyprintf(42 + 4 * (x + FCMAX), 4 + FCMAX, "%4d", twacht[x]);
  }
  xyprintf(36 + 4 * FCMAX, 4 + FCMAX, "twacht");
  for (y = 0; y < FCMAX; ++y)
  {
      xyprintf(46 + 8 * FCMAX, y + 4, "%2s", FC_code[y]);
      xyprintf(50 + 8 * FCMAX, y + 4, "%4d", max_par(y));
  }


#ifndef AUTOMAAT
//    xyprintf(92, 0, "  d     Hm   Ht   Am   Dm");
//    xyprintf(92, 1, "%s:  %3d  %3d  %3d  %3d", D_code[d11_1], TDH_max[d11_1], TDH_timer[d11_1], TDHA_max[d11_1], TDHDYN_max[d11_1]);
//    xyprintf(92, 2, "%s:  %3d  %3d  %3d  %3d", D_code[d11_2], TDH_max[d11_2], TDH_timer[d11_2], TDHA_max[d11_2], TDHDYN_max[d11_2]);
//    xyprintf(92, 3, "%s:  %3d  %3d  %3d  %3d", D_code[d11_3], TDH_max[d11_3], TDH_timer[d11_3], TDHA_max[d11_3], TDHDYN_max[d11_3]);
//    xyprintf(92, 4, "%s:  %3d  %3d  %3d  %3d", D_code[d11_4], TDH_max[d11_4], TDH_timer[d11_4], TDHA_max[d11_4], TDHDYN_max[d11_4]);
#endif	
PrioAanwezig();
  if (TS)
{
    fpt = fopen("MyFile.csv", "a");    
    for (prio=0;prio<prioFCMAX;++prio)
    {
        x = iFC_PRIOix[prio];
        if (iPrioriteit[prio] && (iStartGroen[prio] < twacht[x])) twacht[x] = iStartGroen[prio]; 
    }

    for (x = 0; x < FCMAX; ++x)
    {
        fprintf(fpt, "%4d,", twacht[x] * (A[x] != 0 || PRIOFC[x]) * R[x]);
    }
    fprintf(fpt, "%7d,", (H[hprio02bus]) * 50);
    fprintf(fpt, "%7d,", (H[hprio03bus]) * 50);
    fprintf(fpt, "%7d,", (H[hprio05bus]) * 50);
    fprintf(fpt, "%7d,", (H[hprio08bus]) * 50);
    fprintf(fpt, "%7d,", (H[hprio09bus]) * 50);
    fprintf(fpt, "%7d,", (H[hprio11bus]) * 50);
    fprintf(fpt, "\n");
    fclose(fpt);
    }
}

void pre_system_application(void)
{
//    xyprintf(0,0,"twacht[fc02] = %3d A[fc02] = %3d, PRIOFC[fc02] = %3d",twacht[fc02],A[fc02], PRIOFC[fc02]);
}

void post_system_application(void)
{

}

void post_system_application2(void)
{

}

void post_dump_application(void)
{

}
void BepaalRealisatieTijden_Add(void)
{

}

void BepaalInterStartGroenTijden_Add(void)
{

}

boolv Correctie_TISG_add(void)
{
    return FALSE;
}
boolv CorrectieRealisatieTijd_Add(void)
{
    return FALSE;
}

boolv Correctie_InterStartGroentijdTijd_PRIO_Add(void)
{
    return FALSE;
}

